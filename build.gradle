plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'

	// asciidoctor: .adoc 문서를 HTML/PDF로 변환
	id "org.asciidoctor.jvm.convert" version "3.3.2"

	// restdocs-api-spec: REST Docs와 OpenAPI 문서 생성용
	id 'com.epages.restdocs-api-spec' version '0.18.2'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt // asciidoctor에서 사용할 추가 의존성
}

// 프로젝트 정보
group = 'timetogether'
version = '0.0.1-SNAPSHOT'

// 자바 버전
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

// 저장소 설정
repositories {
	mavenCentral()

}

dependencies {
	// Spring Boot 기본 스타터
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'

	// JWT 관련 의존성
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// 테스트 관련
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// DB 드라이버
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	// implementation 'com.h2database:h2' // H2 테스트용 DB

	// Lombok 설정
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Spring Configuration Metadata 생성용
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// QueryDSL 설정
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// RestDocs 설정
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:3.0.0'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:3.0.0'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	//aws, S3 설정
	implementation 'io.awspring.cloud:spring-cloud-aws-starter:3.1.1'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	//테스트 코드 내 h2 설정
	runtimeOnly 'com.h2database:h2'

	//헬스체크
	implementation 'org.springframework.boot:spring-boot-starter-actuator'


}

ext {
	snippetsDir = file('build/generated-snippets')
}

// OpenAPI 설정
openapi3 {
	server = 'http://localhost:8080'
	title = 'My API'
	description = 'My API description'
	version = '0.1.0'
	format = 'json'
	outputDirectory = 'build/api-spec'
}

// test 작업에 JUnit 플랫폼 사용
tasks.named('test') {
	doFirst {
		delete file('build/generated-snippets') // 기존 문서 스니펫 제거
	}
	useJUnitPlatform()
	outputs.dir snippetsDir // for asciidoctor
	finalizedBy 'asciidoctor'
}

// asciidoctor는 테스트 후 실행
tasks.named('asciidoctor') {
	dependsOn test
	configurations 'asciidoctorExt'
	inputs.dir snippetsDir
	doFirst {
		delete file('src/main/resources/static/docs')
	}
}

// OpenAPI 문서 생성 및 JWT 인증 정의 주입
tasks.register('injectSecurityDefinition') {
	doLast {
		def outputFile = file("build/api-spec/openapi3.json")
		if (outputFile.exists()) {
			def json = new groovy.json.JsonSlurper().parseText(outputFile.text)
			json.components = json.components ?: [:]
			json.components.securitySchemes = json.components.securitySchemes ?: [:]
			json.components.securitySchemes.BearerAuth = [
					type         : "http",
					scheme       : "bearer",
					bearerFormat : "JWT"
			]
			json.security = [[ "BearerAuth": [] ]]
			outputFile.text = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(json))
			println "JWT security definition injected into openapi3.json"
		} else {
			println "openapi3.json not found: ${outputFile.absolutePath}"
		}
	}
}

tasks.register('generateOpenApiSpec') {
	group = 'documentation'
	description = 'Generates the OpenAPI specification'
	dependsOn 'test'
	finalizedBy 'openapi3'
}

tasks.register('copyDocuments', Copy) {
	group = 'documentation'
	description = 'Copies docs to static resources'

	from("build/docs/asciidoc") {
		into("/")
	}
	from("build/api-spec") {
		include "openapi3.json"
		into("/")
	}
	into "src/main/resources/static/docs"
}

// bootJar에 포함
tasks.named('bootJar') {
	dependsOn 'copyDocuments'
	from("src/main/resources/static/docs") {
		into "static/docs"
	}
}

// 안전한 연결을 위해 afterEvaluate 사용
afterEvaluate {
	tasks.named('openapi3') {
		dependsOn tasks.named('test')
		finalizedBy tasks.named('injectSecurityDefinition')
	}
	tasks.named('injectSecurityDefinition') {
		finalizedBy tasks.named('copyDocuments')
	}
	tasks.named('asciidoctor') {
		finalizedBy tasks.named('generateOpenApiSpec')
	}
}

tasks.named('copyDocuments') {
	outputs.upToDateWhen { false }  // 항상 문서 복사 강제
}

// 빌드시 생성된 QueryDSL 파일 폴더를 관리
clean {
	delete file('src/main/generated')
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file('src/main/generated')
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs += '-parameters'
}


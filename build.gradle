plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'

	id "org.asciidoctor.jvm.convert" version "3.3.2" // adoc 파일을 변환하고 build 디렉토리에 복사

	// rest docs api spec
	id 'com.epages.restdocs-api-spec' version '0.18.2'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

group = 'timetogether'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot 기본 스타터
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// JWT 관련 의존성
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// 테스트 관련
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// DB 드라이버
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'com.h2database:h2' // H2 테스트용 DB

	// Lombok 설정
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Spring Configuration Metadata 생성용
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// QueryDSL 설정
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// RestDocs 설정
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:3.0.0'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:3.0.0'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
}

ext {
	snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
	useJUnitPlatform()
}


tasks.named('asciidoctor') {
	dependsOn test
	configurations 'asciidoctorExt'
	inputs.dir snippetsDir
	doFirst {
		delete file('src/main/resources/static/docs')
	}
	finalizedBy 'copyDocument'
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

bootJar {
	dependsOn 'openapi3'
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}

openapi3 {
	server = 'http://localhost:8080'
	title = 'My API'
	description = 'My API description'
	version = '0.1.0'
	format = 'json'

	outputDirectory = 'build/api-spec'
}

task injectSecurityDefinition {
	doLast {
		def outputFile = file("build/api-spec/openapi3.json")
		if (outputFile.exists()) {
			def json = new groovy.json.JsonSlurper().parseText(outputFile.text)
			json.components = json.components ?: [:]
			json.components.securitySchemes = json.components.securitySchemes ?: [:]
			json.components.securitySchemes.BearerAuth = [
					type         : "http",
					scheme       : "bearer",
					bearerFormat : "JWT"
			]
			json.security = [[ "BearerAuth": [] ]]
			outputFile.text = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(json))
			println "JWT security definition injected into openapi3.json"
		} else {
			println "openapi3.json not found: ${outputFile.absolutePath}"
		}
	}
}

task copyOpenApiSpec(type: Copy) {
	from "build/api-spec"
	include "openapi3.json"
	into "src/main/resources/static/docs"
}

afterEvaluate {
	tasks.named("openapi3").configure {
		finalizedBy injectSecurityDefinition, copyOpenApiSpec
	}

	tasks.named("build") {
		dependsOn tasks.named("openapi3")
	}

	tasks.named("bootJar") {
		dependsOn tasks.named("openapi3")
	}
}

clean {
	delete file('src/main/generated')
}
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file('src/main/generated')
}